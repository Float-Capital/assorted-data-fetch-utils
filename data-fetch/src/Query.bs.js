// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var GqlConverters = require("./lib/GqlConverters.bs.js");

var Raw = {};

function parse(value) {
  var value$1 = value.feeds;
  return {
          feeds: value$1.map(function (value) {
                return {
                        id: value.id,
                        name: value.name
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.feeds;
  var feeds = value$1.map(function (value) {
        var value$1 = value.name;
        var value$2 = value.id;
        return {
                id: value$2,
                name: value$1
              };
      });
  return {
          feeds: feeds
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var GetAllFeeds = {
  Raw: Raw,
  query: "query getAllFeeds  {\nfeeds(first: 1000)  {\nid  \nname  \n}\n\n}\n",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.feed;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.rounds;
    tmp = {
      id: value$1.id,
      name: value$1.name,
      rounds: value$2.map(function (value) {
            var value$1 = value.value;
            return {
                    number: GqlConverters.$$BigInt.parse(value.number),
                    value: !(value$1 == null) ? Caml_option.some(GqlConverters.$$BigInt.parse(value$1)) : undefined,
                    unixTimestamp: value.unixTimestamp
                  };
          })
    };
  }
  return {
          feed: tmp
        };
}

function serialize$1(value) {
  var value$1 = value.feed;
  var feed;
  if (value$1 !== undefined) {
    var value$2 = value$1.rounds;
    var rounds = value$2.map(function (value) {
          var value$1 = value.unixTimestamp;
          var value$2 = value.value;
          var value$3 = value$2 !== undefined ? GqlConverters.$$BigInt.serialize(Caml_option.valFromOption(value$2)) : null;
          var value$4 = value.number;
          var value$5 = GqlConverters.$$BigInt.serialize(value$4);
          return {
                  number: value$5,
                  value: value$3,
                  unixTimestamp: value$1
                };
        });
    var value$3 = value$1.name;
    var value$4 = value$1.id;
    feed = {
      id: value$4,
      name: value$3,
      rounds: rounds
    };
  } else {
    feed = null;
  }
  return {
          feed: feed
        };
}

function serializeVariables$1(inp) {
  return {
          offset: inp.offset,
          feedId: inp.feedId
        };
}

function makeVariables$1(offset, feedId, param) {
  return {
          offset: offset,
          feedId: feedId
        };
}

var GetFeedData = {
  Raw: Raw$1,
  query: "query getFeedData($offset: Int!, $feedId: String!)  {\nfeed(id: $feedId)  {\nid  \nname  \nrounds(first: 1000, skip: $offset, orderBy: unixTimestamp, orderDirection: asc)  {\nnumber  \nvalue  \nunixTimestamp  \n}\n\n}\n\n}\n",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

exports.GetAllFeeds = GetAllFeeds;
exports.GetFeedData = GetFeedData;
/* GqlConverters Not a pure module */
